Documentation Beacon 2 PI API Querying the API
Beacon 2 Production Implementation API
Querying the API
Beacon PI accepts two types of request methods: GET and POST.

You can find further introduction to Beacon parameters in  Beacon v2 Documentation.

GET Method
GET method is a bit more limited as this method only accepts request parameters, three generic parameters and ontology filters.

Query Parameters
These are the defined set of parameters (key-value pair) attached to the end of a URL used to provide additional information to a web server when making requests.

Generic parameters	Type	Examples
• requestedSchema	String	
requestedSchema=ga4gh-service-info-v1.0

• skip	integer (Skip) ≥ 0
Default: 0	
skip=0

• limit	integer (Limit) ≥ 0
Default: 10
Max: 100	
limit=10

Request parameters	Type	Examples
• start	integer <int64> ≥ 0
(or comma-separated integers)	
start=16050074

• end	integer <int64> ≥ 0
(or comma-separated integers)	
end=16052080

• assemblyId	string	
assemblyId=GRCh38

• referenceName	integer <int64> ≥ 0	
referenceName=22

• referenceBases	string	
referenceBases=G

• alternateBases	string	
alternateBases=A

• variantMinLength	integer <int64> ≥ 0	
variantMinLength=5

• variantMaxLength	integer <int64> ≥ 0	
variantMaxLength=2

• geneId	string	
geneId=CCNL2

• aminoacidChange	string	
aminoacidChange=p.Thr130Met

• variantType	string	
variantType=SNP

• genomicAlleleShortForm	string	
genomicAlleleShortForm=NC_000022.11:g.16050075A>G

• clinicalRelevance	string	
clinicalRelevance=pathogenic

Filters	Type	Examples
• filters	string
(comma-separated strings of ontologies)	
filters=NCIT:C16576,NCIT:C42331

GET query examples
Beacon Sequence Query
http://localhost:5050/api/g_variants?start=16050606&alternateBases=A&referenceBases=G&referenceName=22&assemblyId=GRCh37

Beacon Range Query
http://localhost:5050/api/g_variants?start=16050606&end=16050607&alternateBases=A&referenceBases=G&referenceName=22&assemblyId=GRCh37

Beacon GeneId Query
http://localhost:5050/api/g_variants?geneId=KRAS&variantType=INDEL

Beacon Bracket Query
http://localhost:5050/api/g_variants?referenceName=22&start=16050074,16050076&end=16050090,16050096&variantType=SNP&assemblyId=GRCh38

Genomic Allele Query
http://localhost:5050/api/g_variants?genomicAlleleShortForm= NC_000021.10:g.9411383C>T

Aminoacid Change Query
http://localhost:5050/api/g_variants?geneId=KRAS&aminoacidChange=Thr130Met

POST Method
In POST method requests, the endpoints accept all generic parameters and all the filters, apart from the request parameters.

Query Parameters
Generic parameters	Type	Examples
• includeResultsetResponses	string
Default: "HIT"
Enum: "ALL" "HIT" "MISS" "NONE"	
• pagination object (Pagination) Items:
skip
limit
integer (Skip) ≥ 0
Default: 0

integer (Limit) ≥ 0
Default: 10
Max: 100	
skip=0


limit=10

• requestedGranularity	string (Granularity)
Default: "boolean"
Enum: "boolean" "count" "record"	
requestedGranularity="record"

• testMode	boolean (TestMode)
Default: false
testMode=false

Request parameters	Type	Examples
• start	integer <int64> ≥ 0
(or comma-separated integers)	
start=16050074

• end	integer <int64> ≥ 0
(or comma-separated integers)	
end=16052080

• assemblyId	string	
assemblyId=GRCh38

• referenceName	integer <int64> ≥ 0	
referenceName=22

• referenceBases	string	
referenceBases=G

• alternateBases	string	
alternateBases=A

• variantMinLength	integer <int64> ≥ 0	
variantMinLength=5

• variantMaxLength	integer <int64> ≥ 0	
variantMaxLength=2

• geneId	string	
geneId=CCNL2

• aminoacidChange	string	
aminoacidChange=p.Thr130Met

• variantType	string	
variantType=SNP

• genomicAlleleShortForm	string	
genomicAlleleShortForm=NC_000022.11:g.16050075A>G

• clinicalRelevance	string	
clinicalRelevance=pathogenic

Filters	Type	Examples
• filters	Array of OntologyFilter
(object) or
AlphanumericFilter (object)
or CustomFilter (object)
(Filtering Term Element)	
filters: [
  {
    "id": "geographicOrigin",
    "operator": "!",
    "value": "England"
  }
]

POST query examples
Note symbol
You can either make a query with a scope field for each of the filters or just not insert the scope in the filter object. If scope is not stated, then, the scope of the filter will be the same than the endpoint being queried.

Beacon Range Query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "requestParameters": {"alternateBases": "G", "referenceBases": "A", "referenceName": "22", "start": [16050074], "end": [16050568], "variantType": "SNP", "assemblyId": "GRCh37"},
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/g_variants

Simple CURIE based filters query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "filters": [ { "id": "NCIT:C20197", "scope": "individual" }, { "id": "NCIT:C42331", "scope": "individual" } ],
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/individuals

Numerical Age Query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "filters": [
        {
          "id": "diseases.ageOfOnset.iso8601duration",
          "operator": ">",
          "value": "75"
        }
      ],
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/individuals

Alphanumerical Value Query (Exact Value)
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "filters": [
        {
          "id": "geographicOrigin",
          "operator": "=",
          "value": "England"
        }
      ],
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/individuals

Alphanumerical Value Query (Like Value)
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "filters": [
        {
          "id": "geographicOrigin",
          "operator": "=",
          "value": "%land%"
        }
      ],
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/individuals

Alphanumerical Value Query (NOT Value)
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "filters": [
        {
          "id": "geographicOrigin",
          "operator": "!",
          "value": "%land%"
        }
      ],
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/individuals

Semantic Similarity Query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
    "meta": { "apiVersion": "2.0" },
    "query": {
      "filters": [
        {
          "id": "NCIT:C16576",
          "similarity": "high"
        }
      ],
      "includeResultsetResponses": "HIT",
      "pagination": { "skip": 0, "limit": 10 },
      "testMode": false,
      "requestedGranularity": "record"
    }
  }' \
  http://localhost:5050/api/individuals

Custom Filter Query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
  "meta": { "apiVersion": "2.0" },
  "query": {
    "filters": [{"id": "sampleOriginType:blood", "scope": "biosample"}],
    "includeResultsetResponses": "HIT",
    "pagination": { "skip": 0, "limit": 10 },
    "testMode": false,
    "requestedGranularity": "record"
  }
}' \
  http://localhost:5050/api/biosamples

Join Genomic Query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
  "meta": { "apiVersion": "2.0" },
  "query": {
    "requestParameters": {
      "alternateBases": "G",
      "referenceBases": "A",
      "referenceName": "22",
      "start": [16050074],
      "end": [16050568],
      "variantType": "SNP",
      "assemblyId": "GRCh37"
    },
    "filters": [
      { "id": "NCIT:C20197", "scope": "individual" },
      { "id": "NCIT:C42331", "scope": "individual" }
    ],
    "includeResultsetResponses": "HIT",
    "pagination": { "skip": 0, "limit": 100 },
    "testMode": false,
    "requestedGranularity": "record"
  }
}' \
  http://localhost:5050/api/g_variants
Copy
Join Individuals Query
curl \
  -H 'Content-Type: application/json' \
  -X POST \
  -d '{
  "meta": { "apiVersion": "2.0" },
  "query": {
    "requestParameters": {
      "alternateBases": "G",
      "referenceBases": "A",
      "referenceName": "22",
      "start": [16050074],
      "end": [16050568],
      "variantType": "SNP",
      "assemblyId": "GRCh37"
    },
    "filters": [
      { "id": "NCIT:C20197", "scope": "individual" },
      { "id": "NCIT:C42331", "scope": "individual" }
    ],
    "includeResultsetResponses": "HIT",
    "pagination": { "skip": 0, "limit": 10 },
    "testMode": false,
    "requestedGranularity": "record"
  }
}' \
  http://localhost:5050/api/individuals
Copy
Query with Access Token
curl \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer <access_token>' \
  -X POST \
  -d '{
  "meta": { "apiVersion": "2.0" },
  "query": {
    "filters": [
      { "id": "geographicOrigin", "operator": "=", "value": "%land%" }
    ],
    "includeResultsetResponses": "HIT",
    "pagination": { "skip": 0, "limit": 10 },
    "testMode": false,
    "requestedGranularity": "record"
  }
}' \
  http://localhost:5050/api/individuals
Copy
List of endpoints
Endpoints that accept all query parameters
/api/g_variants
/api/individuals
Endpoints that only accept filters and generic parameters
/api/analyses
/api/biosamples
/api/cohorts
/api/datasets
/api/runs
Endpoints that only accept generic parameters
/api/filtering_terms
/api/analyses/{id}
/api/analyses/{id}/g_variants
/api/analyses/filtering_terms
/api/biosamples/{id}
/api/biosamples/{id}/analyses
/api/biosamples/{id}/g_variants
/api/biosamples/{id}/runs
/api/biosamples/filtering_terms
/api/cohorts/{id}
/api/cohorts/{id}/analyses
/api/cohorts/{id}/biosamples
/api/cohorts/{id}/g_variants
/api/cohorts/{id}/individuals
/api/cohorts/{id}/runs
/api/cohorts/filtering_terms
/api/datasets/{id}
/api/datasets/{id}/analyses
/api/datasets/{id}/biosamples
/api/datasets/{id}/g_variants
/api/datasets/{id}/individuals
/api/datasets/{id}/runs
/api/datasets/filtering_terms
/api/g_variants/{id}
/api/g_variants/{id}/analyses
/api/g_variants/{id}/biosamples
/api/g_variants/{id}/individuals
/api/g_variants/{id}/runs
/api/g_variants/filtering_terms
/api/individuals/{id}
/api/individuals/{id}/analyses
/api/individuals/{id}/biosamples
/api/individuals/{id}/g_variants
/api/individuals/{id}/runs
/api/individuals/filtering_terms
/api/runs/{id}
/api/runs/{id}/analyses
/api/runs/{id}/g_variants
/api/runs/filtering_terms
Endpoints that don’t accept query parameters
/api
/api/info
/api/service-info
/api/configuration
/api/entry_types
/api/map
