Beacon 2 Production Implementation API

Configuration

Beacon2 PI API has two folders where a user can configure their beacons:
- conf: for general configuration of the beacon
- source: for configuring the model of the beacon (e.g., entry types and related databases).

Editing your beacon information

To show your beaconâ€™s information correctly, edit both conf.py files from beacon and deploy folders.
Modify the following variables:

beacon_id = 'org.ega-archive.beacon-ri-demo'
beacon_name = 'Beacon Reference Implementation demo'
api_version = 'v2.0.0'
uri = 'https://beacon-apis-demo.ega-archive.org/api/'
org_id = 'EGA'
org_name = 'European Genome-Phenome Archive (EGA)'
org_description = 'The European Genome-phenome Archive (EGA) is a service for permanent archiving and sharing of all types of personally identifiable genetic and phenotypic data resulting from biomedical research projects.'
org_address = 'C/ Dr. Aiguader, 88 PRBB Building 08003 Barcelona, Spain'
org_welcome_url = 'https://ega-archive.org/'
org_contact_url = 'mailto:beacon.ega@crg.eu'
org_logo_url = 'https://legacy.ega-archive.org/images/logo.png'
org_info = ''
description = 'This Beacon is based on synthetic data hosted at the EGA. The dataset contains 2504 samples including genetic data based on 1K Genomes data, and 76 individual attributes and phenotypic data derived from UKBiobank.'
version = 'v2.0'
welcome_url = 'https://beacon.ega-archive.org/'
alternative_url = 'https://beacon-apis-demo.ega-archive.org/api/'
create_datetime = '2021-11-29T12:00:00.000000'
update_datetime = ''

Managing dataset permissions

There are 3 levels of beacon security for a dataset:
- Public: A dataset returned in a beacon query without an authentication token.
- Registered: A dataset that requires a valid token for access.
- Controlled: A dataset requiring a valid token and explicit user permission.

Edit the .yml files inside permissions/datasets:

Public dataset:
public_datasets:
- dataset_id

Registered dataset:
registered_datasets:
- dataset_id

Controlled dataset:
username:
- dataset_id

Supplying AAI credentials for your IDP

For OpenID and OAuth2-based IDPs, create a file inside auth/idp_providers with the .env extension (e.g., something.env) and include:

CLIENT_ID=beacon
CLIENT_SECRET='b26ca0f9-1137-4bee-b453-ee51eefbe7ba'
USER_INFO='http://idp:8080/auth/realms/Beacon/protocol/openid-connect/userinfo'
INTROSPECTION='http://idp:8080/auth/realms/Beacon/protocol/openid-connect/token/introspect'
ISSUER='http://localhost:8080/auth/realms/Beacon'
JWKS_URL='http://idp:8080/auth/realms/Beacon/protocol/openid-connect/certs'

Rebuild beacon container:
docker-compose up -d --build beaconprod

Handling CORS

Modify the variable cors_urls in beacon/conf/conf.py:

cors_urls = ["http://localhost:3000","https://cancer-beacon-demo.ega-archive.org", "https://beacon-network-demo2.ega-archive.org", "https://beacon.ega-archive.org"]

Setting the default granularity

Modify beacon/conf/conf.py:

max_beacon_granularity = "record"

Adding beacon handovers

Modify beacon/utils/handovers.py:

handover_1 = {
    "note": "Description of the handover",
    "url": "Link for the handover",
    "handoverType": {
        "id": "NCIT:C189151",
        "label": "Study Data Repository"
    }
}

To apply this to all datasets:
list_of_handovers=[handover_1]

To apply this per dataset:
dataset1_handover = { "dataset": dataset1_id, "handover": handover_1 }
list_of_handovers_per_dataset=[dataset1_handover]

Configuring entry types

Modify source/manage.py:

g_variants={ 'granularity': {
    'boolean': True,
    'count': True,
    'record': True },
'singleEntryUrl': True,
'endpoints': {'analysis': True, 'biosample': True, 'individual': True, 'run': True },
'testMode': True,
'database': 'mongo' }

Setting the logs

Modify beacon/conf/conf.py:

level=logging.NOTSET

Define the log file path:
log_file=None

TLS configuration

Enable TLS for the Beacon API by setting beacon_server_crt and beacon_server_key in beacon/conf/conf.py.

TLS secured MongoDB

Modify beacon/connections/mongo/conf.py:

database_certificate = "path_to_client_certificate.pem"
database_cafile = "path_to_ca_certificate.pem"

The MongoDB client certificate should be in the combined PEM format: client.key + "
" + client.crt

