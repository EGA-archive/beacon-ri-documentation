Documentation > Beacon Data Tools > Creating the CSV files

Beacon Data Tools
Creating the CSV files

The CSV file is an intermediate file to allow Beacon Data Tools to convert to BFF since the CSVs follow a harmonized structure.

Picking headers

You will find all the possible headers to be used for each entry type (analyses, biosamples, individuals…) in their respective template.csv file inside the csv templates folder. For example, if we go to biosamples.csv, you will see the first column header named like biosampleStatus|id.

This nomenclature is the same used in the Beacon v2 spec. The purpose of the pipe (|) is to separate different field names in the spec, being the left field the one that contains the field in the right.

For this case, in the spec, we would have the biosampleStatus|id.

"biosampleStatus": {
"$ref": "https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/common/ontologyTerm.json", "description": "Ontology value from Experimental Factor Ontology (EFO) Material Entity term (BFO:0000040). Classification of the sample in abnormal sample (EFO:0009655) or reference sample (EFO:0009654).", "examples": [ {"id": "EFO:0009654", "label": "reference sample"}, {"id": "EFO:0009655", "label": "abnormal sample"}, {"id": "EFO:0009656", "label": "neoplastic sample"}, {"id": "EFO:0010941", "label": "metastasis sample"}, {"id": "EFO:0010942", "label": "primary tumor sample"}, {"id": "EFO:0010943", "label": "recurrent tumor sample"} ] }

Being biosampleStatus|id the ontology inside id that belongs to biosampleStatus. So, the rows for this biosampleStatus|id column header should always have an ontology written, like this:

biosampleStatus|id
EFO:0009654
EFO:0009655

In case we add a biosampleStatus|label, then the csv would look like this (each row would be a different sample).

biosampleStatus|id, biosampleStatus|label
EFO:0009654, reference sample
EFO:0009655, abnormal sample

Filling data

If you want to convert metadata or phenoclinical data into BFF, you will have to create the different CSV files for each collection needed, writing the records according to the header columns, which indicate the field of the schema that this data will be placed in. Every new row will be appended to the final output file as a new and independent document. You can find the templates and examples of the different CSV files in the csv folder of the repository.

Fill in the CSV file, following the next rules:

If you want to write data that needs to be appended in the same document (e.g., two different measures, two different IDs), please write data separated with '|'. For example, if you need to write two IDs, the structure would be 'HG00001|HG00002'. In addition, you’ll need to respect this order for their correlatives in the same document. For example, the next row label would need to be: 'labelforHG00001|labelforHG00002'.
As the info field for each collection is very generic and can be filled with different data, you will need to fill in the column data directly with JSON type data. In case you are converting variants with CSV, for copies and subjects for genomicVariations, JSON data is also needed. You can copy/paste this structure to fill in the info field:
{ "info": "Some important information to be added." }

Please, respect the columns like the files inside the templates folder, as the script will read only the columns with the "correctly spelled" headers.
Keep in mind that you don’t need to fill in all the columns. Some are optional, while others belong to specific Beacon specification options and may be incompatible with certain columns. If a column is misfilled, an exception will be raised. The Beacon Data Tools will only convert the columns that contain information, the rest can be removed if wanted.
These are the mandatory fields for each collection:

Analyses: id, analysisDate and pipelineName
Biosamples: id, biosampleStatus and sampleOriginType
Cohorts: id, name and cohortType
Datasets: id and name
Individuals: id and sex
Runs: id, biosampleID and runDate
For further details on filling the fields, refer to the default schemas and the Beacon specification.

The id field in Biosamples must match the samples ids in the VCF header.
The id field in Individuals can match or not the samples names in the VCF header. If it doesn’t match the field invidualsId field must be filled in in Biosamples, mapping the ids in Individuals and the ids in the VCF.
The datasetId in Datasets must match the datasetId field in the conf.py.
Finally, remember that not all the different CSVs for the different collections have to be filled up. If a user does not have information for one collection, Beacon will not complain.